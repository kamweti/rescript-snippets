// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Js_undefined = require("rescript/lib/js/js_undefined.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var letters = [
  "a",
  "b",
  "c"
];

console.log("-------- get -----------");

console.log(Caml_obj.equal(Belt_Array.get(letters, 0), "a"));

console.log(Caml_obj.equal(Belt_Array.get(letters, 0), "a"));

console.log("-------- getExn -----------");

try {
  console.log(Belt_Array.getExn(letters, 25));
}
catch (raw_exn){
  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
  if (exn.RE_EXN_ID === "Assert_failure") {
    console.log("exception thrown: index out of range");
  } else {
    throw exn;
  }
}

console.log("-------- getUnsafe -----------");

var x = letters[32];

console.log(x);

console.log(false);

var x$1 = letters[0];

console.log(Caml_obj.equal(x$1, "a"));

console.log("-------- getUndefined -----------");

var x$2 = letters[32];

console.log(x$2 === undefined);

console.log(letters[0]);

console.log("-------- set -----------");

Belt_Array.set(letters, 1, "z");

console.log(letters);

console.log("-------- setExn -----------");

try {
  Belt_Array.setExn(letters, 223, "z");
}
catch (raw_exn$1){
  var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
  if (exn$1.RE_EXN_ID === "Assert_failure") {
    console.log("exception thrown: index out of range");
  } else {
    throw exn$1;
  }
}

console.log("-------- setUnsafe -----------");

var zz = [
  "a",
  "b",
  "c"
];

console.log((zz[20] = "tes", undefined));

console.log(zz);

console.log("-------- shuffleInPlace -----------");

console.log(Belt_Array.shuffleInPlace(letters));

console.log(letters);

console.log("-------- shuffle -----------");

var zz$1 = [
  "a",
  "b",
  "c"
];

console.log(Belt_Array.shuffle(zz$1));

console.log(zz$1);

console.log("-------- reverseInPlace -----------");

var zz$2 = [
  "a",
  "b",
  "c"
];

console.log(Belt_Array.reverseInPlace(zz$2));

console.log(zz$2);

console.log("-------- reverse -----------");

var zz$3 = [
  "a",
  "b",
  "c"
];

console.log(Belt_Array.reverse(zz$3));

console.log(zz$3);

console.log("-------- make -----------");

console.log(Belt_Array.make(3, "heyo"));

console.log("-------- makeBy -----------");

console.log(Belt_Array.makeBy(5, (function (i) {
            return i;
          })));

console.log(Belt_Array.makeBy(-5, (function (i) {
            return i;
          })));

console.log("-------- makeUninitialized -----------");

var arr = new Array(3);

console.log(arr);

console.log(Belt_Array.getExn(arr, 0) === undefined);

console.log(arr);

try {
  Belt_Array.setExn(arr, 0, Js_undefined.fromOption("a"));
  console.log(arr);
}
catch (raw_exn$2){
  var exn$2 = Caml_js_exceptions.internalToOCamlException(raw_exn$2);
  if (exn$2.RE_EXN_ID === "Assert_failure") {
    console.log("exception thrown: index out of range");
  } else {
    throw exn$2;
  }
}

console.log("-------- makeUninitializedUnsafe -----------");

var arr$1 = new Array(3);

console.log(Belt_Array.getExn(arr$1, 0));

Belt_Array.setExn(arr$1, 0, "example");

console.log(arr$1);

console.log(Belt_Array.getExn(arr$1, 1));

console.log("-------- range -----------");

console.log(Belt_Array.range(4, 10));

console.log("-------- rangeBy -----------");

console.log(Belt_Array.rangeBy(4, 10, 2));

console.log("-------- map -----------");

console.log(Belt_Array.map([
          2,
          4
        ], (function (x) {
            return Math.imul(x, x);
          })));

console.log("-------- mapWithIndex -----------");

console.log(Belt_Array.mapWithIndex([
          2,
          4
        ], (function (index, param) {
            return index;
          })));

console.log("-------- reduce -----------");

console.log(Belt_Array.reduce([
          2,
          5
        ], 0, (function (accumulator, value) {
            return accumulator + value | 0;
          })));

console.log("-------- reverse -----------");

console.log(Belt_Array.reverse([
          10,
          11,
          14,
          12,
          13
        ]));

console.log("-------- reverseInPlace -----------");

var arr$2 = [
  10,
  11,
  14
];

Belt_Array.reverseInPlace(arr$2);

console.log(Caml_obj.equal(arr$2, [
          14,
          11,
          10
        ]));

console.log("-------- shuffle -----------");

console.log("-------- shuffleInPlace -----------");

console.log("-------- sliceToEnd -----------");

console.log(Belt_Array.sliceToEnd([
          10,
          11,
          12,
          13
        ], 2));

console.log("-------- some -----------");

console.log(Belt_Array.some([
          10,
          11,
          14
        ], (function (x) {
            return x === 17;
          })));

console.log("-------- truncateToLenghtUnsafe -----------");

var arr$3 = [
  "ant",
  "bee",
  "cat"
];

arr$3.length = 5;

console.log(arr$3);

arr$3.length = 2;

console.log(Caml_obj.equal(arr$3, [
          "ant",
          "bee"
        ]));

console.log("-------- zip -----------");

console.log(Belt_Array.zip([
          "kitty",
          "bus"
        ], [
          "cat",
          "stop",
          "ball"
        ]));

console.log("-------- unzip -----------");

console.log([
      [
        "kitty",
        "cat"
      ],
      [
        "bus",
        "stop"
      ]
    ]);

var initial = 0;

exports.letters = letters;
exports.x = x$2;
exports.zz = zz$3;
exports.initial = initial;
exports.arr = arr$3;
/*  Not a pure module */
